package com.hiscene.hiarslamdemo.camera;

import android.Manifest;
import android.app.Activity;
import android.content.Context;
import android.content.pm.PackageManager;
import android.graphics.ImageFormat;
import android.hardware.camera2.CameraAccessException;
import android.hardware.camera2.CameraCaptureSession;
import android.hardware.camera2.CameraCharacteristics;
import android.hardware.camera2.CameraDevice;
import android.hardware.camera2.CameraManager;
import android.hardware.camera2.CaptureRequest;
import android.media.Image;
import android.media.ImageReader;
import android.os.Build;
import android.util.Log;
import android.util.Range;
import android.widget.Toast;

import com.hiscene.hiarslamdemo.listener.NewFrameListener;

import java.nio.ByteBuffer;
import java.util.Arrays;

import androidx.annotation.NonNull;
import androidx.core.app.ActivityCompat;

/**
 * Camera2 接口
 * Created by jucf on 2017/12/23.
 */
@androidx.annotation.RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)
public class CameraSource {

	private static String TAG = "CameraSource2";

	/**
	 * ID of the current {@link CameraDevice}.
	 */
	private String mCameraId;

	/**
	 * A {@link CameraCaptureSession } for camera preview.
	 */
	private CameraCaptureSession mCaptureSession;

	/**
	 * A reference to the opened {@link CameraDevice}.
	 */
	private CameraDevice mCameraDevice;

	/**
	 * An {@link ImageReader} that handles still image capture.
	 */
	private ImageReader mImageReader;

	/**
	 * {@link CaptureRequest.Builder} for the camera preview
	 */
	private CaptureRequest.Builder mPreviewRequestBuilder;

	/**
	 * {@link CaptureRequest} generated by {@link #mPreviewRequestBuilder}
	 */
	private CaptureRequest mPreviewRequest;

	/**
	 * Whether the current camera device supports Flash or not.
	 */
	private boolean mFlashSupported;

	private Activity activity;

	private int previewWidth;
	private int previewHeight;

	private byte[] dataNV21;

	private NewFrameListener frameListener;

	private static CameraSource _instance = new CameraSource();

	public static CameraSource Instance() {
		return _instance;
	}

	public void setNewFrameListener(NewFrameListener listener) {
		frameListener = listener;
	}

	public CameraSource(){
		previewWidth = 1280;
		previewHeight = 720;
	}

	//  YUV_420_888格式解析
	//https://www.polarxiong.com/archives/Android-Image%E7%B1%BB%E6%B5%85%E6%9E%90-%E7%BB%93%E5%90%88YUV_420_888.html
	/**
	 * This a callback object for the {@link ImageReader}. "onImageAvailable" will be called when a
	 * still image is ready to be saved.
	 */
	private ImageReader.OnImageAvailableListener mOnImageAvailableListener
			= new ImageReader.OnImageAvailableListener() {

		@Override
		public void onImageAvailable(ImageReader reader) {
			// 获取预览数据方法
			Image image = reader.acquireNextImage();
			//transferData2NV21(image, COLOR_FormatNV21);

			if (image == null ) {
				return;
			}
			if (dataNV21 == null) {
				dataNV21 = new byte[image.getWidth() * image.getHeight()*3/2];
			}
			ByteBuffer yBuffer = image.getPlanes()[0].getBuffer();
			yBuffer.get(dataNV21,0,yBuffer.capacity());
			ByteBuffer vBuffer = image.getPlanes()[2].getBuffer();
			vBuffer.get(dataNV21,image.getWidth() * image.getHeight(),vBuffer.capacity());
			if(frameListener != null){
				frameListener.onNewFrame(dataNV21,image.getWidth(),image.getHeight());
			}

			image.close();
		}
	};

	/**
	 * {@link CameraDevice.StateCallback} is called when {@link CameraDevice} changes its state.
	 */
	private final CameraDevice.StateCallback mStateCallback = new CameraDevice.StateCallback() {

		@Override
		public void onOpened(@NonNull CameraDevice cameraDevice) {
			// This method is called when the camera is opened.  We start camera preview here.
			mCameraDevice = cameraDevice;
			createCameraPreviewSession();
		}

		@Override
		public void onDisconnected(@NonNull CameraDevice cameraDevice) {
			cameraDevice.close();
			mCameraDevice = null;
		}

		@Override
		public void onError(@NonNull CameraDevice cameraDevice, int error) {
			cameraDevice.close();
			mCameraDevice = null;
			Log.e(TAG, "连接相机失败,error==" + error);
		}

	};

	public final static int CAMERA_DIRECTION_DEFAULT = 0;
	public final static int CAMERA_DIRECTION_BACK = 1;
	public final static int CAMERA_DIRECTION_FRONT = 2;

	public void openCamera(Activity activity, int cameraFacing) {
		this.activity = activity;
		setUpCameraOutputs(cameraFacing, previewWidth, previewHeight);
		CameraManager manager = (CameraManager) activity.getSystemService(Context.CAMERA_SERVICE);
		try {
			if (ActivityCompat.checkSelfPermission(activity, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED) {
				// TODO: Consider calling
				//    ActivityCompat#requestPermissions
				Log.d("Permissions","opencamera 获取权限 失败");
				// here to request the missing permissions, and then overriding
//                   public void onRequestPermissionsResult(int requestCode, String[] permissions,
//                                                          int[] grantResults)
				// to handle the case where the user grants the permission. See the documentation
				// for ActivityCompat#requestPermissions for more details.
				return;
			}
			Log.d("Permissions","opencamera 获取权限 成功");
			manager.openCamera(mCameraId, mStateCallback, null);
		} catch (CameraAccessException e) {
			e.printStackTrace();
		} catch (Exception e) {
			throw new RuntimeException("Interrupted while trying to lock camera opening.", e);
		}
	}

	/**
	 * Sets up member variables related to camera.
	 *
	 * @param width  The width of available size for camera preview
	 * @param height The height of available size for camera preview
	 */
	@SuppressWarnings("SuspiciousNameCombination")
	private void setUpCameraOutputs(int cameraFacing, int width, int height) {
		CameraManager manager = (CameraManager) activity.getSystemService(Context.CAMERA_SERVICE);
		try {
			for (String cameraId : manager.getCameraIdList()) {
				CameraCharacteristics characteristics
						= manager.getCameraCharacteristics(cameraId);

				// We don't use a front facing camera in this sample.
				Integer facing = characteristics.get(CameraCharacteristics.LENS_FACING);

				if (facing != null && facing != cameraFacing) {
					continue;
				}

				mImageReader = ImageReader.newInstance(width, height,
						ImageFormat.YUV_420_888, /*maxImages*/1);

				mImageReader.setOnImageAvailableListener(
						mOnImageAvailableListener, null);


				// Check if the flash is supported.
				Boolean available = characteristics.get(CameraCharacteristics.FLASH_INFO_AVAILABLE);
				mFlashSupported = available == null ? false : available;

				mCameraId = cameraId;
				Log.i(TAG, "------mCameraId====" + mCameraId);
				return;
			}
		} catch (CameraAccessException e) {
			e.printStackTrace();
		} catch (NullPointerException e) {
			Log.e(TAG, "This device does not support Camera2 API.");
		}
	}

	/**
	 * Creates a new {@link CameraCaptureSession} for camera preview.
	 */
	private void createCameraPreviewSession() {
		try {
			// We set up a CaptureRequest.Builder with the output Surface.
			mPreviewRequestBuilder
					= mCameraDevice.createCaptureRequest(CameraDevice.TEMPLATE_PREVIEW);

			mPreviewRequestBuilder.addTarget(mImageReader.getSurface());

			// Here, we create a CameraCaptureSession for camera preview.
			mCameraDevice.createCaptureSession(Arrays.asList(mImageReader.getSurface()),
					new CameraCaptureSession.StateCallback() {

						@Override
						public void onConfigured(@NonNull CameraCaptureSession cameraCaptureSession) {
							// The camera is already closed
							if (null == mCameraDevice) {
								return;
							}

							// When the session is ready, we start displaying the preview.
							mCaptureSession = cameraCaptureSession;
							try {
								// Auto focus should be continuous for camera preview.
								mPreviewRequestBuilder.set(CaptureRequest.CONTROL_MODE, CaptureRequest.CONTROL_MODE_AUTO);

								//关闭光学防抖（OIS）
								mPreviewRequestBuilder.set(CaptureRequest.LENS_OPTICAL_STABILIZATION_MODE, CaptureRequest.LENS_OPTICAL_STABILIZATION_MODE_OFF);

//								mPreviewRequestBuilder.set(CaptureRequest.CONTROL_AF_MODE, CameraMetadata.CONTROL_AF_MODE_OFF);
//								mPreviewRequestBuilder.set(CaptureRequest.LENS_FOCUS_DISTANCE, 0.5f);


								//设置帧率
								mPreviewRequestBuilder.set(CaptureRequest.CONTROL_AE_TARGET_FPS_RANGE, new Range(30,30));

								// Finally, we start displaying the camera preview.
								mPreviewRequest = mPreviewRequestBuilder.build();
								mCaptureSession.setRepeatingRequest(mPreviewRequest,
										null, null);
							} catch (CameraAccessException e) {
								e.printStackTrace();
							}
						}

						@Override
						public void onConfigureFailed(
								@NonNull CameraCaptureSession cameraCaptureSession) {
							showToast("Failed");
						}
					}, null
			);
		} catch (CameraAccessException e) {
			e.printStackTrace();
		}
	}

	/**
	 * Shows a {@link Toast} on the UI thread.
	 *
	 * @param text The message to show
	 */
	private void showToast(final String text) {
		if (activity != null) {
			activity.runOnUiThread(new Runnable() {
				@Override
				public void run() {
					Toast.makeText(activity, text, Toast.LENGTH_SHORT).show();
				}
			});
		}
	}

	private void setAutoFlash(CaptureRequest.Builder requestBuilder) {
		if (mFlashSupported) {
			requestBuilder.set(CaptureRequest.CONTROL_AE_MODE,
					CaptureRequest.CONTROL_AE_MODE_ON_AUTO_FLASH);
		}
	}

	/**
	 * Closes the current {@link CameraDevice}.
	 */
	public void closeCamera() {
		try {
			if (null != mCaptureSession) {
				mCaptureSession.close();
				mCaptureSession = null;
			}
			if (null != mCameraDevice) {
				mCameraDevice.close();
				mCameraDevice = null;
			}
			if (null != mImageReader) {
				mImageReader.close();
				mImageReader = null;
			}
		} catch (Exception e) {
			throw new RuntimeException("Interrupted while trying to lock camera closing.", e);
		}
	}

	public int getPreviewWidth() {
		return previewWidth;
	}

	public int getPreviewHeight() {
		return previewHeight;
	}
}
